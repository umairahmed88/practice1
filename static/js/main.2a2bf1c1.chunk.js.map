{"version":3,"sources":["components/card/card.styles.jsx","components/card/card.component.jsx","components/card-list/card-list.styles.jsx","components/card-list/card-list.components.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["CardContainer","styled","div","Card","props","alt","src","practice","id","name","email","CardListContainer","CardList","practices","map","key","SearchBox","className","type","placeholder","onChange","onSearchChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredFileds","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yuBAEO,IAAMA,EAAgBC,IAAOC,IAAV,KCEbC,EAAO,SAAAC,GAAK,OACrB,kBAACJ,EAAD,KACI,yBAAKK,IAAI,WAAWC,IAAG,+BAA0BF,EAAMG,SAASC,GAAzC,4BACvB,4BAAKJ,EAAMG,SAASE,MACpB,2BAAIL,EAAMG,SAASG,S,wNCNpB,IAAMC,EAAoBV,IAAOC,IAAV,KCIjBU,EAAW,SAAAR,GAAK,OACrB,kBAACO,EAAD,KACCP,EAAMS,UAAUC,KAAI,SAAAP,GAAQ,OACzB,kBAAC,EAAD,CAAMQ,IAAKR,EAASC,GAAID,SAAUA,SCLjCS,G,MAAY,SAAAZ,GAAK,OAC1B,2BACAa,UAAW,SACXC,KAAK,SACLC,YAAa,gBACbC,SAAUhB,EAAMiB,mBCoCLC,G,wDApCf,aAAe,IAAD,8BACZ,gBAcFD,eAAiB,SAAAE,GACf,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXf,UAAW,GACXY,YAAa,IALH,E,gEASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEX,UAAWoB,S,+BAOlC,IAAD,EAC4BC,KAAKN,MAAhCf,EADD,EACCA,UAAWY,EADZ,EACYA,YACbU,EAAiBtB,EAAUuB,QAAO,SAAA7B,GAAQ,OAC9CA,EAASE,KAAK4B,cAAcC,SAASb,EAAYY,kBAGnD,OACE,yBAAKpB,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWI,eAAgBa,KAAKb,iBAChC,kBAAC,EAAD,CAAUR,UAAWsB,S,GA9BXI,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2a2bf1c1.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const CardContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    background-color: #95dada;\n    border: 1px solid grey;\n    border-radius: 5px;\n    padding: 25px;\n    cursor: pointer;\n    -moz-osx-font-smoothing: grayscale;\n    backface-visibility: hidden;\n    transform: translateZ(0);\n    transition: transform 0.25s ease-out;\n  \n  &:hover {\n    transform: scale(1.05);\n  }\n`","import React from 'react';\n\nimport {CardContainer} from './card.styles';\n\nexport const Card = props => (\n    <CardContainer>\n        <img alt='practice' src={`https://robohash.org/${props.practice.id}?set=set2&size=180x180`}/>\n        <h2>{props.practice.name}</h2>\n        <p>{props.practice.email}</p>\n    </CardContainer>\n)","import styled from 'styled-components';\n\nexport const CardListContainer = styled.div`\n        width: 85vw;\n        margin: 0 auto;\n        display: grid;\n        grid-template-columns: 1fr 1fr 1fr 1fr;\n        grid-gap: 20px;\n`","import React from 'react';\n\nimport {Card} from '../card/card.component'\n\nimport { CardListContainer } from './card-list.styles';\n\nexport const CardList = props => (\n        <CardListContainer>\n        {props.practices.map(practice => (\n            <Card key={practice.id} practice={practice}/>\n        ))}\n    </CardListContainer>\n);","import React from 'react';\n\nimport './search-box.styles.css'\n\nexport const SearchBox = props => (\n    <input \n    className ='search'\n    type='search' \n    placeholder= 'search fields'\n    onChange={props.onSearchChange}\n  />\n\n)","import React, { Component } from 'react';\n\nimport {CardList} from './components/card-list/card-list.components'\n\nimport {SearchBox} from './components/search-box/search-box.component'\n\nimport './App.css';\n\nclass App extends Component {\nconstructor() {\n  super();\n\n  this.state = {\n    practices: [],\n    searchField: ''\n  };\n}\n\ncomponentDidMount() {\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ practices: users }));\n}\n\nonSearchChange = e => {\n  this.setState({searchField: e.target.value});\n};\n\n  render() {\n    const { practices, searchField } = this.state;\n    const filteredFileds = practices.filter(practice => \n      practice.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox onSearchChange={this.onSearchChange}/>\n        <CardList practices={filteredFileds} />\n      </div>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}